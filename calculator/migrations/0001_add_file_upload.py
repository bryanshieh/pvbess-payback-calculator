# Generated by Django 4.2.7 on 2025-06-27 23:21

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BESSSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('capacity_kwh', models.FloatField(help_text='Battery capacity in kWh')),
                ('usable_capacity_kwh', models.FloatField(help_text='Usable capacity in kWh')),
                ('max_charge_rate_kw', models.FloatField(help_text='Maximum charge rate in kW')),
                ('max_discharge_rate_kw', models.FloatField(help_text='Maximum discharge rate in kW')),
                ('round_trip_efficiency', models.FloatField(default=0.9, help_text='Round-trip efficiency (0-1)')),
                ('charge_efficiency', models.FloatField(default=0.95, help_text='Charge efficiency (0-1)')),
                ('discharge_efficiency', models.FloatField(default=0.95, help_text='Discharge efficiency (0-1)')),
                ('control_strategy', models.CharField(choices=[('self_consumption', 'Self-consumption optimization'), ('time_of_use', 'Time-of-use optimization'), ('peak_shaving', 'Peak demand shaving')], default='self_consumption', max_length=20)),
                ('min_soc', models.FloatField(default=0.1, help_text='Minimum state of charge (0-1)')),
                ('max_soc', models.FloatField(default=0.9, help_text='Maximum state of charge (0-1)')),
            ],
        ),
        migrations.CreateModel(
            name='FinancialParameters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pv_cost_per_kw', models.FloatField(default=2000, help_text='PV system cost per kW')),
                ('bess_cost_per_kwh', models.FloatField(default=500, help_text='BESS cost per kWh')),
                ('installation_cost_percent', models.FloatField(default=0.1, help_text='Installation cost as % of system cost')),
                ('electricity_rate', models.FloatField(default=0.15, help_text='Electricity rate per kWh')),
                ('peak_rate', models.FloatField(default=0.25, help_text='Peak electricity rate per kWh')),
                ('off_peak_rate', models.FloatField(default=0.1, help_text='Off-peak electricity rate per kWh')),
                ('federal_tax_credit', models.FloatField(default=0.3, help_text='Federal tax credit (0-1)')),
                ('state_incentive', models.FloatField(default=0.0, help_text='State incentive per kWh')),
                ('discount_rate', models.FloatField(default=0.05, help_text='Discount rate for NPV calculations')),
                ('electricity_inflation', models.FloatField(default=0.03, help_text='Annual electricity rate inflation')),
                ('system_lifetime', models.IntegerField(default=25, help_text='System lifetime in years')),
            ],
        ),
        migrations.CreateModel(
            name='PVSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('system_size_kw', models.FloatField(help_text='System size in kW')),
                ('panel_efficiency', models.FloatField(default=0.2, help_text='Panel efficiency (0-1)')),
                ('inverter_efficiency', models.FloatField(default=0.96, help_text='Inverter efficiency (0-1)')),
                ('system_efficiency', models.FloatField(default=0.75, help_text='Overall system efficiency (0-1)')),
                ('latitude', models.FloatField(help_text='Latitude in decimal degrees')),
                ('longitude', models.FloatField(help_text='Longitude in decimal degrees')),
                ('tilt_angle', models.FloatField(default=30, help_text='Panel tilt angle in degrees')),
                ('azimuth', models.FloatField(default=180, help_text='Panel azimuth (180 = South)')),
                ('annual_degradation', models.FloatField(default=0.005, help_text='Annual degradation rate (0-1)')),
            ],
        ),
        migrations.CreateModel(
            name='EnergyProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('energy_data_file', models.FileField(blank=True, help_text='Upload CSV or XML file with monthly energy consumption data', null=True, upload_to='energy_data/')),
                ('jan_consumption', models.FloatField(default=0)),
                ('feb_consumption', models.FloatField(default=0)),
                ('mar_consumption', models.FloatField(default=0)),
                ('apr_consumption', models.FloatField(default=0)),
                ('may_consumption', models.FloatField(default=0)),
                ('jun_consumption', models.FloatField(default=0)),
                ('jul_consumption', models.FloatField(default=0)),
                ('aug_consumption', models.FloatField(default=0)),
                ('sep_consumption', models.FloatField(default=0)),
                ('oct_consumption', models.FloatField(default=0)),
                ('nov_consumption', models.FloatField(default=0)),
                ('dec_consumption', models.FloatField(default=0)),
                ('annual_consumption', models.FloatField(default=0)),
                ('peak_demand', models.FloatField(default=0)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CalculationResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('total_system_cost', models.FloatField()),
                ('annual_savings', models.FloatField()),
                ('payback_period_years', models.FloatField()),
                ('npv_25_years', models.FloatField()),
                ('irr_percent', models.FloatField()),
                ('monthly_results', models.TextField(default='{}')),
                ('annual_results', models.TextField(default='{}')),
                ('bess_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calculator.besssystem')),
                ('energy_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calculator.energyprofile')),
                ('financial_params', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calculator.financialparameters')),
                ('pv_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calculator.pvsystem')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
